.reservation-container {
    width: 400px;
    height: auto;
    background-color: white;
    padding: 0px 24px 24px 24px;
    border-radius: 12px;
    /* background-color: red; */
    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-template-rows: 100px 50px 50px;
    gap: 0px 0px;
    grid-auto-flow: row;
    grid-template-areas:
        "profile-pic resource-pic"
        "reservation-info reservation-info"
        "reservation-info-left reservation-info-right";
}

.profile-pic {
    /* background-color: yellow; */
    grid-area: profile-pic;
}

.resource-pic {
    /* background-color: orange; */
    grid-area: resource-pic;
}

.reservation-info {
    justify-self: center;
    /* background-color: violet; */
    grid-area: reservation-info;
    width: 100%;
}

.reservation-info-left {
    justify-self: center;

    /* background-color: blue; */
    grid-area: reservation-info-left;
}

.reservation-info-right {
    justify-self: center;

    /* background-color: green; */
    grid-area: reservation-info-right;
}


.no-avatar {
    position: relative;
    bottom: 20px;
    height: 100%;
    min-width: 80px;
    min-height: 80px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    border-radius: 50%;
    background-color: #F1F1F1;
    margin: auto;
    margin: auto;
    border: 2px solid var(--red);
}

.pic {
    position: relative;
    bottom: 20px;
    width: 120px;
    height: 100%;
    min-width: 100px;
    min-height: 100px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    margin: auto;
    margin: auto;
}


.card {
    margin: 12px;
    cursor: pointer;
    min-width: 300px;

    pointer-events: auto;

    transform: scale(1);
    opacity: 1;
    transition: all 150ms ease-in-out;

    &:nth-child(even) {
        transform: translateY(8px);
    }

    &:nth-child(n) {
        transform: rotate(-5deg);
    }
}
.card-gray {
    margin: 12px;
    cursor: pointer;
    min-width: 300px;

    pointer-events: auto;

    transform: scale(1);
    opacity: 1;
    transition: all 150ms ease-in-out;
    background-color: gainsboro !important;

    filter: grayscale(100%);
}

.container {
    /* height: 100%; */
    width: 100%;
    display: grid;
    place-content: center;
    margin-top: 24px;
    margin-bottom: 24px;

}

.cards {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
    pointer-events: none;
    place-content: center;

}

.cards:hover>.card:hover {
    transform: scale(1.10);
    z-index: 10;
}

.cards:hover>.card:not(:hover) {
    opacity: 0.5;
}


.partecipants-list {
    display: flex;
    flex-direction: row;
    max-width: fit-content;
    overflow: scroll;
    -ms-overflow-style: none;
    /* IE and Edge */
    scrollbar-width: none;
    /* Firefox */
}

.partecipant {
    background-color: #4285F4;
    border-radius: 12px;
    width: 200px;
    min-width: 100px;
    max-width: 300px;
    margin: 0;
    margin-left: 4px !important;
    margin-right: 4px !important;
    padding-left: 8px;
    padding-right: 8px;
    white-space: nowrap;
    max-width: max-content;
    overflow: hidden;
    text-overflow: ellipsis;
    color: #F1F1F1;
    font-weight: 500;
    cursor: pointer;
}

.partecipants-list::-webkit-scrollbar {
    display: none;
}

.avatars {
    position: absolute;
    top: -12px;
    z-index: 2;

    --gap: 0.35em;
    --avatar-size: 5em;
    --overlap-size: 2em;
    --hover-overlap-size: 4em;
    /* Best to keep lower than --avatar-size so that there is still some overlap on hover */
    --border-size: 0.4em;
    --num-children: 3;
    /* Value is automatically updated based on the number of children. See :has() below. Does not work in Firefox though. */
    --num-children-1: calc(var(--num-children) - 1);

    background: var(--color-avatars-background);
    border-radius: var(--avatar-size);

    display: grid;
    gap: var(--gap);
    padding: var(--gap);
    margin: 0 auto;


    grid-auto-flow: column;
    grid-template-columns: repeat(var(--num-children), var(--grid-cell-size-to-use));
    /* 	grid-auto-columns: var(--grid-cell-size-to-use); */
    width: calc(var(--grid-cell-size-to-use) * var(--num-children-1) + var(--gap) * var(--num-children) + var(--avatar-size) + var(--border-size));
    transition: all ease-in-out 0.25s;

    border: calc(var(--border-size) / 2) solid rgb(0 0 0 / 0.3);
}

.avatars {
    --grid-cell-size-to-use: var(--overlap-size);
}


:is(
    /* Wrapped in an :is() to not break Firefox which does not support :has() */
    .avatars:hover,
    .avatars:not(hover):has(> :focus)

    /* Also grow when tabbing into the list */
) {
    --grid-cell-size-to-use: var(--hover-overlap-size, var(--avatar-size));
}

.avatars>* {
    width: var(--avatar-size);
    aspect-ratio: 1;
    height: auto;

    clip-path: circle(calc(var(--avatar-size) / 2 + var(--border-size) * 2));
    outline: none;
}

.avatars img {
    width: 100%;
    height: auto;

    --border-color: var(--color-core-primary);
    outline: var(--border-size) solid var(--border-color);
    outline-offset: calc(var(--border-size) * -2 + 1px);
    /* 1px extra to cater for rounding errors */

    border: var(--border-size) solid var(--color-avatars-background);
    border-radius: var(--avatar-size);

    transition: all ease-in-out 0.15s;
}

.avatars :is(:hover, :focus)>img {
    --border-color: var(--color-core-tertiary);
    scale: 1.1;
}

/* Update --num-children based on the number of children .avatars has */
.avatars:where(:has(> *:nth-of-type(1):last-child)) {
    --num-children: 1;
}

.avatars:where(:has(> *:nth-of-type(2):last-child)) {
    --num-children: 2;
}

.avatars:where(:has(> *:nth-of-type(3):last-child)) {
    --num-children: 3;
}

.avatars:where(:has(> *:nth-of-type(4):last-child)) {
    --num-children: 4;
}

.avatars:where(:has(> *:nth-of-type(5):last-child)) {
    --num-children: 5;
}



